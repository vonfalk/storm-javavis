use lang:bs;
use lang:bs:macro;
use core:io;

/**
 * Serializable class.
 */
class Data : persist {
	Int a;
	Int b;
	Employee data;

	init() {
		init() { a = 5; b = 8; }
	}

	// Write. Should be automatically generated...
	void write(ObjOStream to) {
		var mode = to.startObject(this);
		if (mode & Serialize:members) {
			to.member("a", named{core:Int});
			to.member("b", named{core:Int});
			to.member("c", named{core:Bool});
			to.member("data", named{Employee});
			to.endMembers();
		}
		if (mode & Serialize:body) {
			a.write(to);
			b.write(to);
			true.write(to);
			data.write(to);
			to.endBody();
		}
	}

	// Read. Should be automatically generated...
	// static Data read(ObjIStream from) {
	// 	// TODO: How do we handle inheritance?
	// 	var mode = from.startObject();
	// 	if (mode & Serialize:members) {
	// 		from.member("a", named{core:Int});
	// 		from.member("b", named{core:Int});
	// 		from.member("c", named{core:Bool});
	// 		from.member("data", named{Employee});
	// 		from.endMembers();
	// 	}
	// 	if (mode & Serialize:body) {
	// 		// Create an instance of the object and load data from it.
	// 	} else {
	// 		// Retrieve a previously stored object.
	// 	}
	// }
}

/**
 * Another serializable class.
 */
class Employee : persist {
	Str name;
	Int coolness;

	init() {
		init() { name = "John Smith"; coolness = 500; }
	}

	void write(ObjOStream to) {
		var mode = to.startObject(this);
		if (mode & Serialize:members) {
			to.member("name", named{core:Str});
			to.member("coolness", named{core:Int});
			to.endMembers();
		}
		if (mode & Serialize:body) {
			name.write(to);
			coolness.write(to);
			to.endBody();
		}
	}
}


// Persist decorator
void persist(Class c) {
	print("Decorator: " # c);
}

// Test serialization.
void testSerialize() {
	Data x;
	MemOStream out;
	ObjOStream obj(out);

	x.write(obj);

	MemIStream in(out.buffer);
	util:TextObjStream read(in);
	print("Result: " # read.read());
}
