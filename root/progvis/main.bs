use ui;
use layout;
use graphics;
use core:geometry;
use core:io;
use lang:bs:macro;

/**
 * Generic exception shown to the user.
 */
class ProgvisError extends Exception {
	init(Str msg) { init() { msg = msg; } }

	Str msg;

	void message(StrBuf to) {
		to << msg;
	}
}

/**
 * Main window.
 */
class MainWin extends Frame {
	private MainPainter painter;

	// Currently open file(s).
	private Url[] currentFiles;

	init() {
		init("Progvis", Size(800, 800)) {}

		PopupMenu fileMenu;
		fileMenu << Menu:Text("Open file...", &this.onOpen());
		// fileMenu << Menu:Text("Open task...", &this.onOpenTask());
		fileMenu << Menu:Text("Reload program", &this.onReload());

		PopupMenu runMenu;
		runMenu << Menu:Text("Restart", &this.onRestart());
		runMenu << Menu:Text("Spawn thread", &this.onSpawnThread());
		runMenu << Menu:Check("Track reads/writes", &this.onTrackMemory(Bool));

		PopupMenu helpMenu;
		helpMenu << Menu:Text("About...", &this.onAbout());

		MenuBar m;
		m << Menu:Submenu("File", fileMenu)
			<< Menu:Submenu("Run", runMenu)
			<< Menu:Submenu("Help", helpMenu);

		menu = m;

		painter(painter);
		create();
	}

	// Mostly for testing.
	void open(Url file) {
		open([file]);
	}

	// Called when the frame is closed.
	void close() : override {
		painter.cleanup();
		super:close();
	}

	Bool onMouseMove(Point pt) : override {
		painter.mouseMoved(pt);
		true;
	}

	void onMouseEnter() : override {}

	void onMouseLeave() : override {
		painter.mouseLeave();
	}

	Bool onClick(Bool down, Point pt, MouseButton button) {
		painter.mouseClicked(pt, down, button);
		true;
	}

	private void onOpen() {
		FileTypes ft("Source code");
		for (k in Program:supportedFiles)
			ft.add("${k}-source", [k]);

		FilePicker picker = FilePicker:open(ft).okLabel("Open").multiselect();
		if (!picker.show(this))
			return;

		open(picker.results);
	}

	private void onReload() {
		if (currentFiles.empty)
			showMessage(this, "Error", "You need to open a file before you can reload it.");
		else
			open(currentFiles);
	}

	private void onRestart() {
		painter.restart();
	}

	private void onSpawnThread() {
		painter.spawnThread();
	}

	private void onTrackMemory(Bool b) {
		painter.trackMemory(b);
		painter.repaint();
	}

	private void onAbout() {
		var license = named{PROGVIS};
		var version = named{PROGVIS_VERSION};
		showLicenseDialog(this, ProgramInfo("Progvis", "Filip Strömbäck", version.version, license));
	}

	// Open one or more files, shows nice messages on error.
	private void open(Url[] files) {
		currentFiles = files;
		{
			StrBuf title;
			title << "Progvis - ";
			for (i, f in files) {
				if (i > 0)
					title << ", ";
				title << f.name;
			}
			text = title.toS;
		}

		try {
			painter.cleanup();
			painter.open(files, &this.onError, &this.onConcurrencyError);
		} catch (core:lang:CodeError error) {
			CompileErrorDialog dlg(error.messageText, error.pos);
			dlg.show(this);
		} catch (Exception error) {
			// Print the stack trace in the terminal to make it easier to debug.
			print("Error:\n${error}");
			showMessage(this, "Error opening code", "Unable to open the selected files:\n${error.message}");
		}
	}

	// Called when an error is triggered from a program.
	private void onError(Nat threadId, Exception e) {
		showMessage(this, "Thread ${threadId} crashed", "Thread ${threadId} crashed with the following message:\n${e.message}");
	}

	// Called when a concurrency error is encountered.
	private void onConcurrencyError(Str[] messages) {
		StrBuf msg;
		msg << "Concurrency issues were encountered:\n";
		for (m in messages)
			msg << m << "\n";
		showMessage(this, "Concurrency issues", msg.toS);
	}
}

class MainPainter extends Painter {
	// The workspace we want to draw.
	private Workspace workspace;

	// The program we're currently executing.
	private Program? program;

	// Left mouse button pressed?
	private Bool mouseDown;

	// Current drawable object in focus. Only useful when 'mousedown' is pressed.
	private Drawable? mouseFocus;

	// Location mouse was pressed at.
	private Point mouseOffset;

	// Offset for the workspace.
	private Point offset;

	// Lock for traversal. The traversal may perform thread switches, so we need to make sure that
	// multiple traversals are not in flight at the same time.
	private sync:Lock traversalLock;

	init() {
		init();
		bgColor = Color(0.8, 0.8, 0.8);
	}

	// Set whether or not to track reads/writes.
	void trackMemory(Bool track) {
		workspace.trackMemory = track;
	}

	// Open a program.
	void open(Url[] files, fn(Nat, Exception)->void errorCb, fn(Str[])->void concurrencyCb) {
		var loaded = Program:load(files);
		program = loaded;
		workspace.globals = loaded.findGlobals();
		workspace.hints = loaded.hints;
		workspace.onError = concurrencyCb;
		loaded.onChange = &this.update();
		loaded.onError = errorCb;
		update();
		loaded.spawn(loaded.main);
	}

	// Clean up the running program (i.e. make sure all threads are terminated).
	void cleanup() {
		if (program)
			program.terminate();

		workspace.clear();
		offset = Point();
		repaint();
	}

	// Restart the program.
	void restart() {
		if (program) {
			program.terminate();
			workspace.clear();
			workspace.globals = program.findGlobals();
			program.spawn(program.main);
		}
	}

	// Spawn another thread.
	void spawnThread() {
		if (program) {
			program.spawn(program.main);
		}
	}

	// Render everything.
	Bool render(Size me, Graphics g) : override {
		g.transform(translate(-offset));
		workspace.render(Rect(offset, me), g);
		false;
	}

	// Update the visualization of the data.
	void update() {
		sync:Lock:Guard guard(traversalLock);
		workspace.beginTraversal();

		if (program) {
			for (id, thread in program.threads) {
				workspace.traverse(thread);
			}

			if (output = program.getOutput()) {
				workspace.outputText(output);
			}
		}

		workspace.endTraversal();

		repaint();
	}

	// Called when the mouse is moved.
	void mouseMoved(Point pt) {
		if (!mouseDown)
			return;

		pt += offset;

		if (mouseFocus) {
			// Call the drawable.
			if (mouseFocus.mouseMoved(pt, mouseOffset))
				repaint();
		} else {
			// Update our transform.
			offset -= pt - mouseOffset;
			repaint();
		}
	}

	// Called when a mouse button is clicked.
	void mouseClicked(Point pt, Bool down, MouseButton button) {
		pt += offset;

		if (button == MouseButton:left) {
			if (down) {
				mouseDown = true;
				mouseOffset = pt;
				mouseFocus = workspace.findAtActivate(pt);

				if (mouseFocus) {
					mouseFocus.mouseClicked(pt, down);
				}

				repaint();
			} else {
				mouseOffset = pt;
				mouseLeave();
			}
		}
	}

	// Called when the mouse leaves the window.
	void mouseLeave() {
		if (mouseFocus) {
			// Tell it we released the cursor. We might want to differentiate between the two cases later on...
			if (mouseFocus.mouseClicked(mouseOffset, false))
				repaint();
		}

		mouseDown = false;
		mouseFocus = null;
	}
}

void main() on Compiler {
	named{progvis}.compile();

	MainWin win;
	win.waitForClose();
}

// Used for research, notes whenever the program is started.
void researchMain() on Compiler {
	named{progvis}.compile();
	postUsage();

	MainWin win;
	win.waitForClose();
}

void debug() on Compiler {
	named{progvis}.compile();

	if (url = named{progvis_demo}.url) {
		MainWin win;
		// win.open(url / "demo2.bs");
		// win.open(url / "array.bs");
		// win.open(url / "cpp.cpp");
		// win.open(url / "cpp2.cpp");
		// win.open(url / "cpp3.cpp");
		// win.open(url / "members.cpp");
		// win.open(url / "special_functions.cpp");
		// win.open(url / "return_complex.cpp");
		// win.open(url / "arrays.cpp");
		// win.open(url / "cpp_error.cpp");
		// win.open(url / "str.cpp");
		// win.open(url / "const_example.cpp");
		win.open(url / "pintos_debug.cpp");
		// win.open(url / "pintos_live.c");
		// win.open(url / "thread_example.c");
		// win.open(url / "printf.c");
		// win.open(url / "globals.cpp");
		// win.open(url / "bank" / "bank.c");
		// win.open(url / "bank" / "bank_good.c");
		win.open(url / "buffer" / "buffer.c");
		// win.open(url / "cond.c");
		win.waitForClose();
	}
}

void testCpp() on Compiler {
	if (url = named{progvis_demo}.url) {
		if (p = Program:load(url / "cpp.cpp")) {
			p.run(p.main);
		} else {
			print("Failed to run the program!");
		}
	}
}
