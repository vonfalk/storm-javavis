use core:lang;
use core:asm;
use lang:bs:macro;

class JavaDecl on Compiler {
    SStr name;

    init(SStr name) {
        init { name = name; }
    }
}

class JavaFnDecl extends JavaDecl {

    init(SrcPos pos, Value result, SStr name, Formal[] formals, SQIdentList? qlist, SMethodEnd end) {
        init(name) {
            result = result;
            formals = formals;
            qlist = qlist;
            end = end;
            pos = pos;
        }
    }

    SrcPos pos;

    Value result;

    Formal[] formals;

    SQIdentList? qlist;

    SMethodEnd end;
}

class JavaFunction extends Function {
    SrcPos pos;
    Scope scope;
    JavaFnDecl decl;

    init (Scope scope, SrcPos pos, Value result, Str name, Value[] params, JavaFnDecl decl) {
        init(result, name, params) {
            scope = scope;
            pos = pos;
            decl = decl;
        }
        setCode(LazyCode(&this.code));
    }

    CodeGen code() {
        Block block(pos, Scope(scope, this));
        CodeGen gen(runOn, isMember, result);
        for (v in decl.formals) {
            JavaVar var(v.name.v, v.type.getType(pos), pos);
            block.add(var);
        }
        block.add(decl.end.transform(block));

        gen.l << prolog();
        block.code(gen);
        if (decl.result == Value())
            gen.l << fnRet();

        //print(gen.l.toS);
        
        gen;
    }

    void create(NameSet inside) {
        inside.add(this);
    }
}

value Formal {
    Value type;
    SStr name;

    init(Value type, SStr name) {
        init {
            type = type;
            name = name;
        }
    }
}