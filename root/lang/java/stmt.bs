use core:lang;
use core:asm;
use lang:bs:macro;

class Stmt on Compiler {
    SrcPos pos;
    
    init(SrcPos pos) {
        init { pos = pos; }
    }

    Bool code(CodeGen gen) : abstract;
}

package Bool executeStmt(Block inside, CodeGen gen, Stmt s) on Compiler {
    if (s as Block)
        s.code(gen);
    else {
        //if (inside.step & s.pos.any)
        //    gen.l << location(s.pos);
        
        CodeGen child = gen.child();
        gen.l << begin(child.block);

        Bool returns = s.code(child);

        gen.l << end(child.block);
        returns;
    }
}

class Block extends Stmt {
    Scope scope;
    Stmt[] stmts;
    protected Str->VarDecl vars;
    Bool step;

    init(SrcPos pos, Scope parent) {
        init(pos) { step = true; }
        scope = blockScope (this, parent);
    }

    init(SrcPos pos, Block parent) {
        init(pos) { step = parent.step; }
        scope = blockScope(this, parent.scope);
    }

    void add(Stmt stmt) {
        if (stmt is this)
            return;
        stmts << stmt;
    }

    void add(VarDecl var) {
        print("adding...");
        vars.put(var.name, var);
    }

    void initVariables(CodeGen gen) {
        for (k in vars) {
            print(k.name);
        }
    }

    Named? variable(Str name) {
        if (vars.has(name))
            return vars.ge(name);
        else
            return null;
    }

    Bool code(CodeGen gen) : override {
        for (st in stmts) {
            st.code(gen);
        }
        true;
    }
}

private Scope blockScope(Block block, Scope parent) {
    if (t = parent.top) {
        parent.child(BlockLookup(block, t));
    }
    else {
        parent.child(BlockLookup(block));
    }
}

class BlockLookup extends NameLookup {
    init(Block block) {
        init() { block = block; }
    }

    init(Block block, NameLookup prev) {
        init(prev) {
            block = block;
        }
    }

    Block block;

    Named? find(SimplePart part, Scope source) {
        //if (part.params.empty)
            //return block.variable(part.name);
        
        null;
    }
}

class StmtBlock extends Block {
    init(SrcPos pos, Scope parent) {
        init(pos, parent) {}
    }

    init(SrcPos, Block parent) {
        init(pos, parent) {}
    }

    private Stmt[] content;

    void add(Stmt stmt) {
        content << stmt;
    }

    void prepend(Stmt stmt) {
        content.insert(0, stmt);
    }
}