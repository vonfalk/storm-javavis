use core:lang;
use core:asm;
use lang:bs:macro;

class Stmt on Compiler {
    SrcPos pos;
    
    init(SrcPos pos) {
        init { pos = pos; }
    }

    Bool code(CodeGen gen) : abstract;
}

class Block extends Stmt {
    Scope scope;
    Stmt[] stmts;

    init(SrcPos pos, Scope parent) {
        init(pos) {}
        scope = blockScope (this, parent);
    }

    init(SrcPos pos, Block parent) {
        init(pos) {}
        scope = blockScope(this, parent.scope);
    }

    void add(Stmt stmt) {
        stmts << stmt;
    }

    Bool code(CodeGen gen) : override {
        for (st in stmts) {
            st.code(gen);
        }
        true;
    }
}

private Scope blockScope(Block block, Scope parent) {
    if (t = parent.top) {
        parent.child(BlockLookup(block, t));
    }
    else {
        parent.child(BlockLookup(block));
    }
}

class BlockLookup extends NameLookup {
    init(Block block) {
        init() { block = block; }
    }

    init(Block block, NameLookup prev) {
        init(prev) {
            block = block;
        }
    }

    Block block;

    Named? find(SimplePart part, Scope source) {
        //if (part.params.empty)
            //return block.variable(part.name);
        
        null;
    }
}

class StmtBlock extends Block {
    init(SrcPos pos, Scope parent) {
        init(pos, parent) {}
    }

    init(SrcPos, Block parent) {
        init(pos, parent) {}
    }

    private Stmt[] content;

    void add(Stmt stmt) {
        content << stmt;
    }

    void prepend(Stmt stmt) {
        content.insert(0, stmt);
    }
}