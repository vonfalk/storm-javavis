use core:lang;
use core:asm;
use lang:bs:macro;

class JavaVar extends Named {
    init(Str name, Type val, SrcPos pos) {
        init(pos, name) {
            type = val;
        }
    }

    Var var;

    Type type;

    void create(CodeGen gen) {
        if (var == Var()) {
            var = gen.l.createVar(gen.block, type.size, Operand(), FreeOpt:inactive);
        }

        Listing:VarInfo info(name, type, false, pos);
        gen.l.varInfo(var, info);
    }
}

Type getType(Value val, SrcPos pos) on Compiler {
    if (t = val.type)
        return t;
    throw SyntaxError(pos, "Couldn't find type.");
}

class VarDecl extends Stmt {
    init(SrcPos pos, Block parent, Value type, SStr name) {
        init(pos) {
            var(name.v.toS, type.getType(pos), name.pos);
        }
        parent.add(var);
    }

    JavaVar var;

    Bool code(CodeGen gen) : override {
        gen.l << activate(var.var);
        true;
    }
}

class LocalVarAccess extends Expr {
    JavaVar var;

    init(SrcPos pos, JavaVar var) {
        init(pos) { var = var; }
    }

    Value result() : override {
        Value(var.type);
    }

    Bool code(CodeGen gen) : override {
        gen.l << mov(asSize(rax, var.var.size), var.var);
        true;
    }

    Bool suggestResult(Type t) : override { false; }
}