use core:lang;

class TypeState on Compiler {
    init(JavaType to, Visibility start) {
        init() { to = to; visibility = start; }
    }

    JavaType to;

    Visibility visibility;

    void set(Visibility v) {
        visibility = v;
    }

    void add(Named named) {
        named.visibility = visibility;
        to.add(named);
    }
}


class JavaType extends Type {
    init(SStr name, STypeParams params, SImplements implement, SExtends? extend, SClassBody body) {
        init(name.v, TypeFlags:typeClass) {
            pos = name.pos;
            params = params;
            implement = implement;
            extend = extend;
            body = body;
            defAccess = public;
        }
    }

    SrcPos pos;

    STypeParams params;

    SClassBody body; //content f√∂r vad som finns i typen

    SExtends? extend;

    SImplements implement;

    Visibility defAccess;

    Scope scope() {
        javaScope(this);
    }

    void add(JavaFnDecl decl) {
        Value[] fs;
        for (s in decl.formals)
            fs << s.type;
        JavaFunction fn(scope(), decl.pos, decl.result, decl.name.v, fs, decl);
        fn.create(this);
    }

    Bool loadAll() : override {
        body.transform(this);
        super:loadAll();
    }
}