use core:lang;
use core:asm;
use lang:bs:macro;

class Expr extends Stmt {
    init(SrcPos pos) {
        init(pos) {}
    }

    Bool code(CodeGen gen) : abstract;

    Value result() : abstract;

    Bool suggestResult(Type t) : abstract;
}

class StrLiteral extends Expr {
    init(SrcPos pos, SStr val) {
        init(pos) {
            val = val.v.toS.unescape();
        }
    }

    private Str val;

    Value result() : override {
        Value(named{Str});
    }

    Bool code(CodeGen gen) : override {
        gen.l << mov(ptrA, objPtr(val));
        true;
    }

    Bool suggestResult(Type t) : override { false; }
}

class IntLiteral extends Expr {
    init(SrcPos pos, Long val) {
        init(pos) { val = val; }
    }

    init(SrcPos pos, Str str) {
        init(pos) { val = str.toLong(); }
    }

    private Long val;

    Value result() : override {
        Value(named{Int});
    }

    Bool code(CodeGen gen) : override {
        gen.l << mov(rax, longConst(val));
        true;
    }

    Bool suggestResult(Type t) : override {
		return t is named{Byte} | t is named{Int} | t is named{Long} | t is named{Nat} | t is named{Word};
    }
}

class BoolLiteral extends Expr {
    init(SrcPos pos, Bool val) {
        init(pos) { val = val; }
    }

    private Bool val;

    Value result() : override {
        Value(named{Bool});
    }

    Bool suggestResult(Type t) : override { false; }

    Bool code(CodeGen gen) : override {
        Byte val = if (this.val) { 1b; } else { 0b; };
        gen.l << mov(al, byteConst(val));
        true;
    }
}

class FnCall extends Expr {
    private Function fn;
    private Expr[] args;

    init(SrcPos pos, Block block, SStr id, Expr[] args) {
        init(pos) {
            fn = findFn(pos, block, id, args);
            args = args;
        }
    }

    Value result() : override {
        fn.result;
    }

    Bool suggestResult(Type t) : override { false; }

    Bool code(CodeGen gen) : override {
        Operand[] ops;
        for (e in args) {
            e.code(gen);
            var v = gen.l.createVar(gen.block, e.result.size);
            ops << v;
            gen.l << mov(v, asSize(ptrA, v.size));
        }
        if (fn.result == Value()) {
            fn.autoCall(gen, ops, CodeResult());
        }
        else {
            CodeResult codeRes(fn.result, gen.block);
            fn.autoCall(gen, ops, codeRes);
            gen.l << mov(asSize(ptrA, fn.result.size), codeRes.location(gen));
        }
        true;
    }

    private Function findFn(SrcPos pos, Block block, SStr id, Expr[] args):static {
        Value[] types;
        for (e in args) {
            types << e.result();
        }
        SimpleName sName(id.v, types);
        
        if (fn = block.scope.find(sName) as Function) {
            return fn;
        }

        throw SyntaxError(pos, "Could not find function ${sName}.");
    }
}

class AssignOp extends Expr {
    JavaVar to;
    Expr rhs;

    init(SrcPos pos, JavaVar to, Expr rhs) {
        init(pos) {
            to = to;
            rhs = rhs;
        }
        if (!Value(to.type).canStore(rhs.result))
            if (!rhs.suggestResult(to.type))
                throw SyntaxError(pos, "Variable assignment not valid.");
    }

    Bool code(CodeGen gen) : override {
        rhs.code(gen);
        gen.l << mov(to.var, asSize(rax, to.var.size));
        true;
    }

    Bool suggestResult(Type t) : override { false; }

    Value result() : override {
        Value();
    }
}

Expr assign(SrcPos pos, Block block, SStr name, Expr rhs) {
    if (v = block.scope.find(SimpleName(name.v)) as JavaVar) {
        AssignOp op(pos, v, rhs);
        return op;
    }
    throw SyntaxError(pos, "assign(SrcPos, Block, SStr, Expr): Variable ${name.v} was not found.");
}
// byt ut LocalVarAccess, inkludera .var direkt.

Expr readVar(SrcPos pos, Block block, SStr name) {
    if (v = block.scope.find(SimpleName(name.v)) as JavaVar) {
        LocalVarAccess r(pos, v);
        return r;
    }
    
    throw SyntaxError(pos, "readVar(SrcPos, Block, SStr): Variable ${name.v} not found.");
}