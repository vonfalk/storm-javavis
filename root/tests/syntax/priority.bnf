delimiter = Whitespace;

void Whitespace();
Whitespace : "[ \n\r\t]*";

// Test some priority. This example is from a variable declaration with reserved keywords.
Str Name();
Name => n : "[A-Za-z]+" n;

Buffer Prio();
Prio[10] => Buffer() : "async", Name -> add;
Prio[20] => Buffer() : Name -> add, Name -> add;
Prio[30] => Buffer() : "var", Name -> add;

// Try something similar to 'unless' in BS.
Buffer Unless();
Unless => Buffer() : (Stmt -> add, )*;

Buffer Stmt();
Stmt[10] => Buffer() : "unless", Name -> add - (, Stmt -> add)*;
Stmt => Buffer() : Name -> add;

// Unless[10] => Buffer() : "unless", Unless -> add - (, Unless -> add)*;
// Unless => Buffer() : Name -> add;

// a.b.c should match like this: (a.b).c
// a,b,c should match like this: a,(b,c)
Buffer Rec();
Rec[0] => Buffer() : Name -> add;
Rec[+1] => Buffer() : Rec -> add, "\.", Rec -> add;
Rec[-1] => Buffer() : Rec -> add, "\,", Rec -> add;

// Try parsing groups of 3 as well (not as common, but tests robustness).
Buffer Rec3();
Rec3[0] => Buffer() : Name -> add;
Rec3[+1] => Buffer() : Rec3 -> add, "\.", Rec3 -> add, "\.", Rec3 -> add;
Rec3[-1] => Buffer() : Rec3 -> add, ",", Rec3 -> add, ",", Rec3 -> add;


// Try parsing statements similar to "spawn" in Basic Storm.
Buffer SpawnExpr();
SpawnExpr[10] => Buffer() : "var", Name -> add, "=", SpawnExpr -> add;
SpawnExpr[00] => Buffer() : Name -> addSpace, Name -> add, "=", SpawnExpr -> add;
SpawnExpr[00] => Buffer() : Name -> addSpace, Name -> add;
SpawnExpr[10] => e : SpawnAtom e;

Buffer SpawnAtom();
SpawnAtom[10] => Buffer() : "spawn" -> add, Name -> add;
SpawnAtom[00] => Buffer() : Name -> add;

// Try parsing operands similarly to what the ASM block does in Basic Storm.
Buffer AsmOperand();
AsmOperand => v : AsmReg v;
AsmOperand[-10] => v : AsmVarRef v;

Buffer AsmOperands();
AsmOperands => Buffer() : AsmOperand -> add - (, AsmOperand -> add)*;

Buffer AsmReg();
AsmReg => Buffer() : "ptrA";

Buffer AsmVarRef();
AsmVarRef => Buffer() : "[A-Za-z]+" -> add;

// Check if the LL parser is too greedy.
Buffer LL();
LL => r : "{", LL2 r, "}";
LL => r : LLContent r;

Buffer LL2();
LL2 => r : LLContent r;

Buffer LLContent();
LLContent[10] => Buffer() : "a" -> add;
LLContent[00] => Buffer() : "a" -> add, "a" -> add;

